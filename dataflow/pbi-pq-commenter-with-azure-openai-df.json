{
    "name": "pbi-pq-commenter-with-azure-openai-df",
    "description": "Dataflow version of pbi-pq-commenter-with-azure-openai project",
    "version": "1.0",
    "culture": "en-US",
    "modifiedTime": "2024-05-10T22:08:39.6107044+00:00",
    "ppdf:outputFileFormat": "Csv",
    "pbi:mashup": {
        "fastCombine": true,
        "allowNativeQueries": false,
        "queriesMetadata": {
            "Workspace_Server_Settings_URL": {
                "queryId": "719ca93c-71a6-4e2b-a2b8-97297af46f12",
                "queryName": "Workspace_Server_Settings_URL",
                "queryGroupId": "0582cbc5-0db9-44a3-b2c4-ab9265b26f3e"
            },
            "Semantic_Model_Name": {
                "queryId": "bc9f96c1-a870-4a55-bcc9-755c45347074",
                "queryName": "Semantic_Model_Name",
                "queryGroupId": "0582cbc5-0db9-44a3-b2c4-ab9265b26f3e"
            },
            "Is_Dev": {
                "queryId": "2fbbba1b-288f-463f-a5a0-6e91633c6fbf",
                "queryName": "Is_Dev",
                "queryGroupId": "0582cbc5-0db9-44a3-b2c4-ab9265b26f3e"
            },
            "Restrict_Rows_When_Is_Dev": {
                "queryId": "23702a5e-0d44-42f3-9e33-d5b7204b4cc3",
                "queryName": "Restrict_Rows_When_Is_Dev",
                "queryGroupId": "0582cbc5-0db9-44a3-b2c4-ab9265b26f3e"
            },
            "Azure_Open_API_URL": {
                "queryId": "3a6a728b-c784-4eab-8a0b-38da825b7d13",
                "queryName": "Azure_Open_API_URL",
                "queryGroupId": "39efdade-e25b-4616-b925-9ca6c9ab5781"
            },
            "Azure_Open_API_Key": {
                "queryId": "9335bc71-8ba5-41b0-85b8-2d36ec461f61",
                "queryName": "Azure_Open_API_Key",
                "queryGroupId": "39efdade-e25b-4616-b925-9ca6c9ab5781"
            },
            "fnPromptAzureOpenAI": {
                "queryId": "2888428b-c7cc-4f4c-a207-09987bcdc3d8",
                "queryName": "fnPromptAzureOpenAI",
                "queryGroupId": "0537a66d-7a9a-46b9-ae9b-6056c79debb4"
            },
            "fnGetComment": {
                "queryId": "bdf51793-6ae1-407f-b128-a4b9731add2c",
                "queryName": "fnGetComment",
                "queryGroupId": "0537a66d-7a9a-46b9-ae9b-6056c79debb4"
            },
            "fnGetCommentVariableSuggestion": {
                "queryId": "3aafa5ec-7393-4f9a-a5e4-b2254f79c2c8",
                "queryName": "fnGetCommentVariableSuggestion",
                "queryGroupId": "0537a66d-7a9a-46b9-ae9b-6056c79debb4"
            },
            "fnBulkReplace": {
                "queryId": "b02fdf88-a2a9-4a6a-8753-f06556fb7af1",
                "queryName": "fnBulkReplace",
                "queryGroupId": "d0be9ee5-0766-4369-8091-691997d922ad"
            },
            "DMV_M_Discover_Dependency_Query": {
                "queryId": "7aec95d8-abfc-4844-8873-343ed55d63d1",
                "queryName": "DMV_M_Discover_Dependency_Query",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec"
            },
            "DMV_M_Expression_Query": {
                "queryId": "389c5e7a-d6ae-4d51-bbf9-aac1e83bd0da",
                "queryName": "DMV_M_Expression_Query",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec"
            },
            "Workspace_Name": {
                "queryId": "366ba1e7-7188-46f6-9ded-59766dab1fa6",
                "queryName": "Workspace_Name",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec"
            },
            "M Expressions Not Loaded into Dataset": {
                "queryId": "fb77dcc7-bd41-4167-8b63-f1fd23886146",
                "queryName": "M Expressions Not Loaded into Dataset",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec",
                "loadEnabled": true
            },
            "M Expressions Visible in Dataset": {
                "queryId": "e7cf1eea-2f51-419f-8f2b-b2836bb02028",
                "queryName": "M Expressions Visible in Dataset",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec",
                "loadEnabled": true
            },
            "M Expressions Parsed Commenting": {
                "queryId": "89ae6250-6c16-401e-9322-05c21f303024",
                "queryName": "M Expressions Parsed Commenting",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec",
                "loadEnabled": true
            },
            "M Expressions Variable Naming": {
                "queryId": "f3f7f231-453e-49f7-a669-9e4dd19ee66e",
                "queryName": "M Expressions Variable Naming",
                "queryGroupId": "1a15a4aa-f383-4d4d-a49a-ce2d08b72aec",
                "loadEnabled": true
            },
            "Comment_Prompt_Template": {
                "queryId": "7af8fef4-cd21-432b-8e1e-70f93df77622",
                "queryName": "Comment_Prompt_Template",
                "queryGroupId": "2921fe94-cd95-4582-b044-49715cd9e4c7"
            },
            "Variable_Rename_Suggestion_Template": {
                "queryId": "0e907f53-ed75-4491-bfbe-c8d15eb7f0ba",
                "queryName": "Variable_Rename_Suggestion_Template",
                "queryGroupId": "2921fe94-cd95-4582-b044-49715cd9e4c7"
            },
            "Power Query Code": {
                "queryId": "a93d96d1-0b18-4aa6-8d67-60ebea50c887",
                "queryName": "Power Query Code",
                "queryGroupId": "8dc1f78d-0460-404a-97bb-af7a56ff1b16",
                "loadEnabled": true
            },
            "Power Query Code Transformed": {
                "queryId": "119b541a-6043-46fd-a813-b35a8d96b6e5",
                "queryName": "Power Query Code Transformed",
                "queryGroupId": "8dc1f78d-0460-404a-97bb-af7a56ff1b16",
                "loadEnabled": true
            }
        },
        "document": "section Section1;\r\n[Description = \"The endpoint for the workspace as described in https://learn.microsoft.com/en-us/power-bi/enterprise/service-premium-connect-tools\"]\r\nshared Workspace_Server_Settings_URL = \"INSERT_URL\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\n[Description = \"Name of the Semantic Model (aka Dataset) in the service.\"]\r\nshared Semantic_Model_Name = \"INSERT_NAME\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared Is_Dev = let\n    Source = false meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type logical]\nin\n    Source;\r\n[Description = \"Reduce by X rows to help with filtering down Power Query table for development.\"]\r\nshared Restrict_Rows_When_Is_Dev = 10 meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type number];\r\n[Description = \"The endpoint to the Azure OpenAI chat completions.\"]\r\nshared Azure_Open_API_URL = \"INSERT_URL\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\n[Description = \"The API key to access your Azure OpenAI instance.\"]\r\nshared Azure_Open_API_Key = \"INSERT_KEY\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text];\r\nshared fnPromptAzureOpenAI = let\n    Source = (Prompt as text) =>\n    let\n    Url = Azure_Open_API_URL,\n    ApiKey = Azure_Open_API_Key,\n    Headers = [\n    #\"Content-Type\" = \"application/json\",\n    #\"api-key\" = ApiKey\n    ],\n    Body = Json.FromValue([messages = {[role=\"user\", content = Prompt]}]),\n    Response = Web.Contents (Url , [Headers=Headers, Content=Body]),\n    Content = Json.Document(Response)\nin\n    Content\nin\n    Source;\r\nshared fnGetComment = let\n    Source = (Input as text) =>\n    let\n    Source = fnPromptAzureOpenAI(Input),\n    choices = Source[choices],\n    choices1 = choices{0},\n    message = choices1[message],\n    content = message[content]\nin\n    content\nin\n    Source;\r\nshared fnGetCommentVariableSuggestion = let\n    Source = (Input as text) =>\n    let\n    Source = fnPromptAzureOpenAI(Input),\n    choices = Source[choices],\n    choices1 = choices{0},\n    message = choices1[message],\n    content = message[content]\nin\n    content\nin\n    Source;\r\nshared fnBulkReplace = let BulkReplace = (ReplaceText as text, FindReplaceTable as table) =>\n    let\n    // Convert column value to Table\n    DataTable= Table.FromRecords({[Code = ReplaceText]}),\n    // Convert DataTable to list\n    DataTableColumn = Table.ToList(DataTable),\n    //Convert the FindReplaceTable to a list using the Table.ToRows function\n    //so we can reference the list with an index number\n    FindReplaceList = Table.ToRows(FindReplaceTable),\n    //Count number of rows in the FindReplaceTable to determine\n    //how many iterations are needed\n    Counter = Table.RowCount(FindReplaceTable),\n    //Define a function to iterate over our list\n    //with the Table.ReplaceValue function\n    BulkReplaceValues = (DataTableTemp, n) =>\n    let\n    //Replace values using nth item in FindReplaceList\n    ReplaceTable = Table.ReplaceValue(\n    DataTableTemp,\n    //replace null with empty string\n    if FindReplaceList{n}{0} = null then \"\" else FindReplaceList{n}{0},\n    if FindReplaceList{n}{1} = null then \"\" else FindReplaceList{n}{1},\n    Replacer.ReplaceText,\n    {\"Code\"}\n    )\nin\n    //if we are not at the end of the FindReplaceList\n    //then iterate through Table.ReplaceValue again\n    if n = Counter - 1\n    then ReplaceTable\n    else @BulkReplaceValues(ReplaceTable, n + 1),\n    //Evaluate the sub-function at the first row\n    Output = BulkReplaceValues(DataTable, 0)\nin\n    Table.First(Output)\nin\n    BulkReplace;\r\n[Description = \"select * from $SYSTEM.DISCOVER_M_EXPRESSIONS\"]\r\nshared DMV_M_Discover_Dependency_Query = let\n     // This code is selecting all records from a system catalog view, DISCOVER_CALC_DEPENDENCY, which holds information about dependencies between calculation entities.\n    #\"Selected All From System Discover Calc Dependency Table-1\" = \"select * from $SYSTEM.DISCOVER_CALC_DEPENDENCY\"\nin\n    #\"Selected All From System Discover Calc Dependency Table-1\";\r\n[Description = \"select * from $SYSTEM.DISCOVER_M_EXPRESSIONS\"]\r\nshared DMV_M_Expression_Query = let\n     // This code fetches all data from the system view DISCOVER_M_EXPRESSIONS. The system view contains metadata about all the expressions used in the Power BI model.\n    #\"Selected All From System Expressions-1\" = \"select * from $SYSTEM.DISCOVER_M_EXPRESSIONS\"\nin\n    #\"Selected All From System Expressions-1\";\r\nshared Workspace_Name = let\n     // This line of code sets the variable \"Source\" to the value of \"Workspace_Server_Settings_URL\". It is part of a Power Query script to retrieve data from the specified URL.\n  #\"Retrieved_Workspace_Server_Settings_URL-1\" = Workspace_Server_Settings_URL,\n     // This line of code is transforming the source data into a structured table. \"Converted to Table\" is the title given to the new table that is created.```\n  #\"Created Single Row Table From Source-2\" = #table(1, {{#\"Retrieved_Workspace_Server_Settings_URL-1\"}}),\n     // This code transforms the 'Column1' data to text type, then splits this column based on the delimiter '/'. The result is two new columns named 'Column1.1' and 'Column1.2'.\n  #\"Split and Transformed Column Types-3\" = Table.SplitColumn(Table.TransformColumnTypes(#\"Created Single Row Table From Source-2\", {{\"Column1\", type text}}), \"Column1\", Splitter.SplitTextByEachDelimiter({\"/\"}, QuoteStyle.Csv, true), {\"Column1.1\", \"Column1.2\"}),\n     // This code is performing a transformation on the \"Column1.2\" of the \"Split column by delimiter\" table. It applies the Text.Clean function to each cell of the column to remove non-printable characters and changes the column's type to nullable text.\n  #\"Transformed and Cleaned Column-4\" = Table.TransformColumns(#\"Split and Transformed Column Types-3\", {{\"Column1.2\", each Text.Clean(_), type nullable text}}),\n     // This code is selecting the first row (index 0) of the 'Column1.2' from the table named 'Cleaned text' in Power Query.\n  #\"Extracted First Row From Cleaned Text Column-5\" = #\"Transformed and Cleaned Column-4\"{0}[Column1.2],\n     // This code is taking the output, #\"Extracted First Row From Cleaned Text Column-5\", from a previous operation and converting it into a table format using the Table.FromValue function.\n  #\"Transformed Drill Down into Table-6\" = Table.FromValue(#\"Extracted First Row From Cleaned Text Column-5\")\nin\n  #\"Transformed Drill Down into Table-6\";\r\nshared #\"M Expressions Not Loaded into Dataset\" = let\n     // This code is establishing a connection to an Analysis Services database using the specified server URL and semantic model name. It also prepares to run a specified DMV (Dynamic Management View) expression query.\n  #\"Extracted Analysis Services Database Info-1\" = AnalysisServices.Database(Workspace_Server_Settings_URL, Semantic_Model_Name, [Query = DMV_M_Expression_Query]),\n     // This code is renaming the 'NAME' column to 'Table Name' and the 'EXPRESSION' column to 'M Expression' in the 'Source' table.\n  #\"Columns Renamed in Source Table-2\" = Table.RenameColumns(#\"Extracted Analysis Services Database Info-1\", {{\"NAME\", \"Table Name\"}, {\"EXPRESSION\", \"M Expression\"}}),\n     // This code removes all columns from the table named #\"Columns Renamed in Source Table-2\", except for the columns \"M Expression\" and \"Table Name\".```\n  #\"Selected Specific Columns from Renamed Table-3\" = Table.SelectColumns(#\"Columns Renamed in Source Table-2\", {\"M Expression\", \"Table Name\"}),\n     // This code snippet is reordering the columns of a table. It removes other columns and specifies that \"Table Name\" and \"M Expression\" should be the first ones.\n  #\"Reordered Columns in Table-4\" = Table.ReorderColumns(#\"Selected Specific Columns from Renamed Table-3\", {\"Table Name\", \"M Expression\"}),\n     // This code adds a new column called \"Starts with Let\" to the \"Reordered Columns\" table, which checks if each data row of the [M Expression] column starts with the word \"let\". The result of this operation is then transformed into a logical data type.\n  #\"Added and Transformed Column to Check for Let Start-5\" = Table.TransformColumnTypes(Table.AddColumn(#\"Reordered Columns in Table-4\", \"Starts with Let\", each Text.StartsWith([M Expression], \"let\")), {{\"Starts with Let\", type logical}}),\n     // This piece of code is adding a new column named \"Dataset Name\" to the table. It populates this new column with the first value from the 'Workspace_Name' table. After that, it transforms the data type of the 'Dataset Name' column to 'text'.```\n  #\"Transformed Column Types and Added Dataset Name-6\" = Table.TransformColumnTypes(Table.AddColumn(#\"Added and Transformed Column to Check for Let Start-5\", \"Dataset Name\", each Table.First(Workspace_Name)[Value]), {{\"Dataset Name\", type text}})\nin\n  #\"Transformed Column Types and Added Dataset Name-6\";\r\nshared #\"M Expressions Visible in Dataset\" = let\n     // This code is establishing a connection to an Analysis Services database using a specified server URL, semantic model name, and a data management view (DMV) query for discovering dependencies.\n    #\"Executed_AnalysisServices_Database_Query-1\" = AnalysisServices.Database(Workspace_Server_Settings_URL, Semantic_Model_Name, [Query = DMV_M_Discover_Dependency_Query]),\n     // This code is filtering the rows in the \"Source\" table, selecting only the ones where the \"OBJECT_TYPE\" is equal to \"PARTITION\".\n    #\"Selected Partition Type Rows-2\" = Table.SelectRows(#\"Executed_AnalysisServices_Database_Query-1\", each ([OBJECT_TYPE] = \"PARTITION\")),\n     // ```This code is filtering out rows from the \"Filter by Partition\" table where the \"TABLE\" column is either null or an empty string.```\n    #\"Filtered Rows With Non-Empty Table Names-3\" = Table.SelectRows(#\"Selected Partition Type Rows-2\", each [TABLE] <> null and [TABLE] <> \"\"),\n     // This code is selecting only the 'EXPRESSION' and 'TABLE' columns from the table \"Filter out empty Tables\" and removes the rest of the columns.\n    #\"Selected Expression and Table Columns-4\" = Table.SelectColumns(#\"Filtered Rows With Non-Empty Table Names-3\",{\"EXPRESSION\", \"TABLE\"}),\n     // This code is reordering the columns in the table named #\"Selected Expression and Table Columns-4\". It sets the order to the columns \"TABLE\" and then \"EXPRESSION\".\n    #\"Reordered Columns in Table-5\" = Table.ReorderColumns(#\"Selected Expression and Table Columns-4\",{\"TABLE\", \"EXPRESSION\"}),\n     // ```This code is renaming the columns of a table. Specifically, it changes the column name \"TABLE\" to \"Table Name\" and changes \"EXPRESSION\" to \"M Expression\".```\n    #\"Renamed Table and Expression Columns-6\" = Table.RenameColumns(#\"Reordered Columns in Table-5\",{{\"TABLE\", \"Table Name\"}, {\"EXPRESSION\", \"M Expression\"}}),\n     // This code is sorting the rows in the table named \"Renamed Columns\" in ascending order based on the column \"Table Name\".\n    #\"Sorted Table By Name Ascending-7\" = Table.Sort(#\"Renamed Table and Expression Columns-6\",{{\"Table Name\", Order.Ascending}}),\n     // This line of code removes the duplicate rows in the column \"Table Name\" from the \"Sorted Rows\" table.\n    #\"Removed Duplicate Table Names-8\" = Table.Distinct(#\"Sorted Table By Name Ascending-7\", {\"Table Name\"}),\n     // This code adds a new column labeled \"Dataset Name\" to the table \"Removed Duplicates\". It populates this column with the first value from the \"Workspace_Name\" table. The new column's data type is then set to text.\n  #\"Transformed Data Type and Added Dataset Name Column-9\" = Table.TransformColumnTypes(Table.AddColumn(#\"Removed Duplicate Table Names-8\", \"Dataset Name\", each Table.First(Workspace_Name)[Value]), {{\"Dataset Name\", type text}})\nin\n    #\"Transformed Data Type and Added Dataset Name Column-9\";\r\nshared #\"M Expressions Parsed Commenting\" = let\n     // This line of code is assigning the content of \"Power Query Code\" to a new variable named \"Source\".\n    #\"Queried Power Code-1\" = #\"Power Query Code\",\n     // This code splits the 'M Expression' column of the 'Source' table into multiple rows at each linefeed (represented by '#(lf)'). The 'Table.TransformColumns' function is used to make this split, and the 'Table.ExpandListColumn' function expands the resulting lists into new rows.\n    #\"Expanded List Column From Transformed Text-2\" = Table.ExpandListColumn(Table.TransformColumns(#\"Queried Power Code-1\", {{\"M Expression\", Splitter.SplitTextByDelimiter(\"#(lf)\", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"M Expression\"),\n     // This code is adding an index column named \"Index\" to the data in the \"Split Column by Delimiter\" table. It begins at 1 and increments by 1 for each row, with the data type designated as Int64.\n    #\"Added Index Column to Split Delimiter Table-3\" = Table.AddIndexColumn(#\"Expanded List Column From Transformed Text-2\", \"Index\", 1, 1, Int64.Type),\n     // This code is grouping rows in the 'Added Index' table based on 'M Expression ID'. It then creates a new table with the grouping, while maintaining the original columns and data types.\n    #\"Grouped Table By M Expression ID-4\" = Table.Group(#\"Added Index Column to Split Delimiter Table-3\", {\"M Expression ID\"}, {{\"Count\", each _, type table[#\"M Expression ID\" = number, #\"Dataset ID\" = nullable text, #\"Dataset Name\" = nullable text, #\"Table Name\" = text, #\"M Expression\" = nullable text, #\"Starts with Let\" = any, Index = number]}}),\n     // This code is adding a new column called \"Custom\" to the \"Grouped Rows\" table. The values in this column come from adding an index column called \"Line Index\" to the \"Count\" table, starting at 0 and incrementing by 1.\n    #\"Added Index Column to Grouped Rows-5\" = Table.AddColumn(#\"Grouped Table By M Expression ID-4\", \"Custom\", each Table.AddIndexColumn([Count], \"Line Index\", 0, 1)),\n     // This code is removing the columns labeled \"M Expression ID\" and \"Count\" from the table referred to as \"Added Custom\".\n    #\"Removed Unnecessary Columns-6\" = Table.RemoveColumns(#\"Added Index Column to Grouped Rows-5\", {\"M Expression ID\", \"Count\"}),\n     // This code is expanding the \"Custom\" table column from the \"Removed Columns\" table. It takes originally nested information (\"M Expression ID\", \"Dataset ID\", \"Dataset Name\", etc.) and displays it in separate, expanded columns.\n    #\"Expanded Table Column Properties-7\" = Table.ExpandTableColumn(#\"Removed Unnecessary Columns-6\", \"Custom\", {\"M Expression ID\", \"Dataset ID\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\", \"Index\", \"Line Index\"}, {\"M Expression ID\", \"Dataset ID\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\", \"Index\", \"Line Index\"}),\n     // This piece of code is transforming the column \"M Expression\" in the table #\"Expanded Table Column Properties-7\" to text data type.\n    #\"Transformed Column Type to Text, Int, etc.-8\" = Table.TransformColumnTypes(#\"Expanded Table Column Properties-7\", {{\"Line Index\", Int64.Type}, {\"Index\", Int64.Type}, {\"Starts with Let\", type logical}, {\"M Expression\", type text}, {\"Table Name\", type text}, {\"Dataset Name\", type text}, {\"Dataset ID\", type text}, {\"M Expression ID\", Int64.Type}}),\n    // Add check for if the line of code is a comment\n  #\"Added Is a Comment - 9\" = Table.TransformColumnTypes(Table.AddColumn(#\"Transformed Column Type to Text, Int, etc.-8\", \"Is a Comment\", each if Text.StartsWith(Text.Remove(Text.Clean([M Expression]),\" \"),\"//\") then true else false), {{\"Is a Comment\", type logical}}),\n     // This code is adding a new column in the table, named \"Exclude For Comment\". This column will contain boolean values based on specific conditions. If the \"M Expression\" column does not contain an \"=\", or it starts with \"let\" or \"in\" after cleaning the text, it returns true; otherwise, it returns false.\n    #\"Added Exclusion Column for Comments-10\" = Table.AddColumn(#\"Added Is a Comment - 9\", \"Exclude For Comment\", each if Text.Contains([M Expression],\"=\") = false or Text.StartsWith(Text.Clean([M Expression]),\"let\") or Text.StartsWith(Text.Clean([M Expression]),\"in\") or [Is a Comment] then true else false, type logical),\n     // The code is adding a new column, \"M Expression To Comment\", to the table. If the \"Exclude For Comment\" field is true, it assigns null to the new field. However, if it's false, it fills the field with the result of replacing \"{_M_CODE_}\" in \"Comment_Prompt_Template\" with the \"M Expression\" field.\n    #\"Added Conditional Column for M Expression Comment-11\" = Table.AddColumn(#\"Added Exclusion Column for Comments-10\", \"M Expression To Comment\", each if [Exclude For Comment] then null else Replacer.ReplaceText(Comment_Prompt_Template,\"{_M_CODE_}\",[M Expression]), type text),\n     // This code is adding a new column named \"fnGetComment\" to the existing table. It uses the function \"fnGetComment\" to populate the cells in the new column, but only if the \"Exclude For Comment\" column for that row is set to false. If \"Exclude For Comment\" is true, it inserts null.\n    #\"Added Column With Comments For M Expression-12\" = Table.AddColumn(#\"Added Conditional Column for M Expression Comment-11\", \"fnGetComment\", each if [Exclude For Comment] = false then fnGetComment([M Expression To Comment]) else null,type text),\n     // This code is adding a new column to the table \"Call fnGetComment\" named \"M Expression with Comment\". It checks if the current row should be excluded for a comment. If true, the value for the new column is populated from the \"M Expression\" column. If false, it inserts a new comment followed by the value from the \"M Expression\" column.\n    #\"Added Comment Column To Table-13\" = Table.AddColumn(#\"Added Column With Comments For M Expression-12\", \"M Expression with Comment\", each if [Exclude For Comment] = true and [Is a Comment] = false then [M Expression] else  \"     // \" & [fnGetComment] & \"#(lf)\" & [M Expression],type text),\n    // This code removes line feeds with a space\n    #\"Replaced Line Feeds with Space-14\" = Table.ReplaceValue(#\"Added Comment Column To Table-13\",\"#(#)(lf)\",\" \",Replacer.ReplaceText,{\"fnGetComment\"})\nin\n    #\"Replaced Line Feeds with Space-14\";\r\nshared #\"M Expressions Variable Naming\" = let\n     // This line of code is assigning the content of \"Power Query Code\" to a new variable named \"Source\".\n    #\"Queried Power Code-1\" = #\"Power Query Code\",\n     // This code splits the 'M Expression' column of the 'Source' table into multiple rows at each linefeed (represented by '#(lf)'). The 'Table.TransformColumns' function is used to make this split, and the 'Table.ExpandListColumn' function expands the resulting lists into new rows.\n    #\"Expanded List Column From Transformed Text-2\" = Table.ExpandListColumn(Table.TransformColumns(#\"Queried Power Code-1\", {{\"M Expression\", Splitter.SplitTextByDelimiter(\"#(lf)\", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"M Expression\"),\n     // This code is adding an index column named \"Index\" to the data in the \"Split Column by Delimiter\" table. It begins at 1 and increments by 1 for each row, with the data type designated as Int64.\n    #\"Added Index Column to Split Delimiter Table-3\" = Table.AddIndexColumn(#\"Expanded List Column From Transformed Text-2\", \"Index\", 1, 1, Int64.Type),\n     // This code is grouping rows in the 'Added Index' table based on 'M Expression ID'. It then creates a new table with the grouping, while maintaining the original columns and data types.\n    #\"Grouped Table By M Expression ID-4\" = Table.Group(#\"Added Index Column to Split Delimiter Table-3\", {\"M Expression ID\"}, {{\"Count\", each _, type table[#\"M Expression ID\" = number, #\"Dataset ID\" = nullable text, #\"Dataset Name\" = nullable text, #\"Table Name\" = text, #\"M Expression\" = nullable text, #\"Starts with Let\" = any, Index = number]}}),\n     // This code is adding a new column named \"Custom\" to the \"Grouped Rows\" table. In this new column, it's applying an index to each item in the \"Count\" column, starting from 0 and incrementing by 1.\n    #\"Added Index Column to Grouped Rows-5\" = Table.AddColumn(#\"Grouped Table By M Expression ID-4\", \"Custom\", each Table.AddIndexColumn([Count], \"Line Index\", 0, 1)),\n     // This code is removing the columns \"M Expression ID\" and \"Count\" from the table labeled \"Added Custom1\".\n    #\"Removed Unnecessary Columns from Table-6\" = Table.RemoveColumns(#\"Added Index Column to Grouped Rows-5\", {\"M Expression ID\", \"Count\"}),\n     // This code is expanding the \"Custom\" table column from the \"Removed Columns\" table. It takes originally nested information (\"M Expression ID\", \"Dataset ID\", \"Dataset Name\", etc.) and displays it in separate, expanded columns.\n    #\"Expanded Table Column Properties-7\" = Table.ExpandTableColumn(#\"Removed Unnecessary Columns from Table-6\", \"Custom\", {\"M Expression ID\", \"Dataset ID\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\", \"Index\", \"Line Index\"}, {\"M Expression ID\", \"Dataset ID\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\", \"Index\", \"Line Index\"}),\n     // This piece of code is transforming the column \"M Expression\" in the table #\"Expanded Table Column Properties-7\" to text data type.\n    #\"Transformed Column Type to Text-8\" = Table.TransformColumnTypes(#\"Expanded Table Column Properties-7\", {{\"M Expression\", type text}}),\n     // This code adds a new column to the table \"Changed Type\" titled \"M Expression after Equal Sign\". If the \"M Expression\" in the row does not contain an equal sign, it places null in the new cell. If there's an equal sign, it extracts text after the equal sign, removes unnecessary spaces and writes it into the row of the new column.\n    #\"Extracted Equal Sign After M Expression-9\" = Table.AddColumn(#\"Transformed Column Type to Text-8\", \"M Expression after Equal Sign\", each if Text.Contains([M Expression],\"=\") = false then null else Text.Clean(Text.Trim(Text.AfterDelimiter([M Expression],\"=\")))),\n     // This piece of code is adding a new column to an existing table called \"Add M Expression after Equal Since\". The new column is titled \"M Expression Before Equal Sign\". This column will contain the cleaned and trimmed portion of a text string that occurs before the \"=\" sign in the M Expression column. It will return null if the \"=\" sign is not present.\n    #\"Split and Cleaned M Expression Before Equal Sign-10\" = Table.AddColumn(#\"Extracted Equal Sign After M Expression-9\", \"M Expression Before Equal Sign\", each if Text.Contains([M Expression],\"=\") = false then null else Text.Clean(Text.Trim(Text.BeforeDelimiter([M Expression],\"=\")))),\n     // This code is adding a new column named \"Is Parameter\" to the table. It checks if each \"M Expression\" contains the text \"meta [IsParameterQuery=true]\". The column type for \"Is Parameter\" is set as logical.\n    #\"Add Is Parameter-11\" = Table.TransformColumnTypes(Table.AddColumn(#\"Split and Cleaned M Expression Before Equal Sign-10\", \"Is Parameter\", each Text.Contains([M Expression], \"meta [IsParameterQuery=true\")), {{\"Is Parameter\", type logical}}),\n     // This code is reordering the columns in a table named \"Add Is Parameter\". The new order specified by column names is \"Line Index\", \"M Expression ID\", \"Dataset ID\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\", \"Index\", \"M Expression after Equal Sign\", \"M Expression Before Equal Sign\".\n    #\"Reordered Table Columns-12\" = Table.ReorderColumns(#\"Add Is Parameter-11\", {\"Line Index\", \"M Expression ID\", \"Dataset ID\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\", \"Index\", \"M Expression after Equal Sign\", \"M Expression Before Equal Sign\"}),\n     // This code is adding a new column named \"M Expression To Suggest Variable Name\" to the table \"Reordered Columns\". If the \"M Expression after Equal Sign\" column is null or if the \"Is Parameter\" column is true, it populates the new column with null. Otherwise, it replaces the text \"{_M_CODE_}\" in the \"Variable_Rename_Suggestion_Template\" with the corresponding value from the \"M Expression after Equal Sign\" column.\n    #\"Added Column with Suggested Variable Names-13\" = Table.AddColumn(#\"Reordered Table Columns-12\", \"M Expression To Suggest Variable Name\", each if [M Expression after Equal Sign] = null or [Is Parameter] then null else Replacer.ReplaceText(Variable_Rename_Suggestion_Template,\"{_M_CODE_}\",[M Expression after Equal Sign])),\n     // This piece of code is adding a new column named 'fnGetCommentVariableSuggestion' to the table. This new column is filled using the output of a function fnGetCommentVariableSuggestion, which is applied on each row in the column 'M Expression To Suggest Variable Name'. If any row in the 'M Expression To Suggest Variable Name' column is null, the corresponding row in the new column will also be null.\n    #\"Added Column with Comment Variable Suggestions-14\" = Table.AddColumn(#\"Added Column with Suggested Variable Names-13\", \"fnGetCommentVariableSuggestion\", each if [M Expression To Suggest Variable Name] = null then null else (try fnGetCommentVariableSuggestion([M Expression To Suggest Variable Name]) otherwise [M Expression Before Equal Sign])),\n     // This code is adding a new column to the table returned by 'Call fnGetCommentVariableSuggestion'. It assigns a 'Suggested Variable Name' to each row. If the return value of 'fnGetCommentVariableSuggestion' is null, null is assigned, otherwise the suggested variable name is formed by concatenating a '#' with a range of text from 'fnGetCommentVariableSuggestion', excluding the last character, and hyphen, and the corresponding 'Line Index'.\n    #\"Added Suggested Variable Names Column-15\" = Table.AddColumn(#\"Added Column with Comment Variable Suggestions-14\", \"Suggested Variable Name\", each if [fnGetCommentVariableSuggestion] = null then null else \"#\" & Text.Range([fnGetCommentVariableSuggestion],0,Text.Length([fnGetCommentVariableSuggestion])-1) & \"-\" & Number.ToText([Line Index]) & \"\"\"\"),\n     // This code is filtering rows from the \"Added Custom\" table by only selecting those rows where the field \"Suggested Variable Name\" is not null and not an empty string.\n    #\"Filtered Rows With Non-Null And Non-Empty Values-16\" = Table.SelectRows(#\"Added Suggested Variable Names Column-15\", each [Suggested Variable Name] <> null and [Suggested Variable Name] <> \"\"),\n     // This code is selecting specific columns (\"M Expression Before Equal Sign\", \"Suggested Variable Name\", \"M Expression ID\") from the \"Filtered Rows\" table, and discarding the rest.\n    #\"Selected Necessary Columns-17\" = Table.SelectColumns(#\"Filtered Rows With Non-Null And Non-Empty Values-16\", {\"M Expression Before Equal Sign\", \"Suggested Variable Name\", \"M Expression ID\"}),\n     // ```This code is renaming two columns in a table to be more standardized. The \"M Expression Before Equal Sign\" column becomes \"Find\", and the \"Suggested Variable Name\" becomes \"Replace\".```\n    #\"Renamed Columns For Clarity-18\" = Table.RenameColumns(#\"Selected Necessary Columns-17\", {{\"M Expression Before Equal Sign\", \"Find\"}, {\"Suggested Variable Name\", \"Replace\"}}),\n     // This piece of code is transforming the column types for two columns, namely \"Replace\" and \"Find\", to text data type in the table that has had its column names standardized.\n    #\"Transformed Column Types to Text-19\" = Table.TransformColumnTypes(#\"Renamed Columns For Clarity-18\", {{\"Replace\", type text}, {\"Find\", type text}}),\n     // This piece of code is changing the data type of the column named \"M Expression ID\" to int in the table named #\"Transformed Column Types to Text-19\", and storing the output in a new table #\"Transformed Column Type to Text-20\".\n    #\"Transformed M Express ID to Int-20\" = Table.TransformColumnTypes(#\"Transformed Column Types to Text-19\", {{\"M Expression ID\", Int64.Type}})\nin\n    #\"Transformed M Express ID to Int-20\";\r\nshared Comment_Prompt_Template = let\n    Source = \"You are an assistant to help Power Query developers comment their code.\n    Please take the code between the ``` marks and perform the following:\n    1) Return a comment explaining what that piece of code is doing.\n    2) Do not start the comment with the word Step or a number\n    3) Do not copy code into the comment.\n    4) Keep the comments to a maximum of 225 characters.\n    ```{_M_CODE_}```\"\nin\n    Source;\r\nshared Variable_Rename_Suggestion_Template = let\n    Source = \"You are an assistant to help Power Query developers comment their code.\n    Please take the code between the ``` marks and perform the following:\n    1) Return a variable name explaining what that piece of code is doing.\n    2) The variable name should always start with a verb in the past tense.\n    3) The variable name should have spaces between words.\n    4) Please keep the variable to a maximum of 50 characters.\n    5) The variable name should be wrapped in double quotes.\n    ```{_M_CODE_}```\"\nin\n    Source;\r\n[Description = \"Original Power Query Code\"]\r\nshared #\"Power Query Code\" = let\n     // This code is combining two tables, \"M Expressions Not Loaded into Dataset\" and \"M Expressions Visible in Dataset\", into one new table titled \"Source\".\n    #\"Combined Not Loaded and Visible M Expressions Tables-1\" = Table.Combine({#\"M Expressions Not Loaded into Dataset\", #\"M Expressions Visible in Dataset\"}),\n     // This code adds an index column named \"Index\" starting with the value 1 to the input table \"Source\". The index increments by 1 for each subsequent row. The data type of the index is set as Int64.\n    #\"Added Index Column to Source Table-2\" = Table.AddIndexColumn(#\"Combined Not Loaded and Visible M Expressions Tables-1\", \"Index\", 1, 1, Int64.Type),\n     // This code is reordering the columns in the table \"Added Index\". The new order is specified as \"Index\", \"Dataset Name\", \"Table Name\", \"M Expression\", and \"Starts with Let\".\n    #\"Reordered Columns in Table-3\" = Table.ReorderColumns(#\"Added Index Column to Source Table-2\",{\"Index\", \"Dataset Name\", \"Table Name\", \"M Expression\", \"Starts with Let\"}),\n     // This line of code is renaming the \"Index\" column in the \"Reordered Columns\" table to \"M Expression ID\".\n    #\"Columns Renamed in Table-4\" = Table.RenameColumns(#\"Reordered Columns in Table-3\",{{\"Index\", \"M Expression ID\"}}),\n     // This piece of code is filtering rows from a renamed table. If the \"Is_Dev\" column is true, only rows with \"Table Name\" equal to \"WebURL\" or \"AlignmentDim\" are selected, else all rows are returned.\n    #\"Selected Rows Based on Dev Status and Table Name-5\" = Table.SelectRows(#\"Columns Renamed in Table-4\", each if Is_Dev = true then ([M Expression ID] <= Restrict_Rows_When_Is_Dev) else 1=1),\n     // This code is replacing the string \"#Source\" with \"#\"\"Source\"\"\" in the \"M Expression\" column of the \"Filtered Rows\" table. This resolves any issues stemming from the incorrect syntax in the source column name.\n    #\"Replaced Special Characters in Filtered Rows-6\" = Table.ReplaceValue(#\"Selected Rows Based on Dev Status and Table Name-5\",\"Source =\",\"#\"\"Source\"\" =\",Replacer.ReplaceText,{\"M Expression\"}),\n     // This code is addressing an issue within the data source by replacing a wrongly formatted string. Particularly, it is fixing incorrect quotation marks usage in column \"M Expression\" by changing '(\"Source\",' to '(\"Source\",'.\n    #\"Replaced Source Issue in Table-7\" = Table.ReplaceValue(#\"Replaced Special Characters in Filtered Rows-6\",\"(Source,\",\"(#\"\"Source\"\",\",Replacer.ReplaceText,{\"M Expression\"}),\n    // This code addresses Source being in the in statement at the end of the code\n    #\"Replaced Source Issue at the End-8\" = Table.ReplaceValue(#\"Replaced Source Issue in Table-7\",\"in#(lf)    Source\",\"in#(lf)    #\"\"Source\"\"\",Replacer.ReplaceText,{\"M Expression\"})\nin\n    #\"Replaced Source Issue at the End-8\";\r\n[Description = \"Power Query Code from the dataset(s) transformed by ChatGPT\"]\r\nshared #\"Power Query Code Transformed\" = let\n     // This line of code is assigning the table or query named \"M Expressions Parsed Commenting\" in the Power Query to the variable \"Source\".\n    #\"Expressions Parsed for Commenting-1\" = #\"M Expressions Parsed Commenting\",\n    // Do a buffer sort by M Expression ID and Line Index the group by\n    #\"Sorted by Line Index and then buffer - 1a\" = Table.Buffer(Table.Sort(#\"Expressions Parsed for Commenting-1\", {{\"M Expression ID\",Order.Ascending},{\"Line Index\", Order.Ascending}})),\n     // This code is grouping rows in the \"Source\" table by \"M Expression ID\" and \"Table Name\". For each group, it combines the \"M Expression with Comment\" into a single text string separated by line feeds. The result is assigned to a new column named \"M Expression\".\n    #\"Grouped Tables By M Expression ID and Table Name-2\" = Table.Group(#\"Sorted by Line Index and then buffer - 1a\", {\"M Expression ID\", \"Table Name\"}, {{\"M Expression\", each Text.Combine([M Expression with Comment],\"#(lf)\"), type nullable text}}),\n     // This code is merging the \"Grouped Rows\" table with the \"M Expressions Variable Naming\" table based on the \"M Expression ID\" column. It uses a left outer join to include all records from \"Grouped Rows\" and matched records from the \"M Expressions Variable Naming\". The resulting table has an additional column \"M Expression Variable Naming\".```\n    #\"Joined Grouped Rows with M Expressions Variable Naming-3\" = Table.NestedJoin(#\"Grouped Tables By M Expression ID and Table Name-2\", {\"M Expression ID\"}, #\"M Expressions Variable Naming\", {\"M Expression ID\"}, \"M Expression Variable Naming\", JoinKind.LeftOuter),\n     // ```This piece of code is adding a new column named \"fnBulkReplace\" to the table called \"Merge with Variable Naming for use in custom function\". This is done by invoking the function fnBulkReplace for each row in the table, using the \"M Expression\" and \"M Expression Variable Naming\" columns as its parameters.```\n    #\"Added Column with Bulk Replace Function Results-4\" = Table.AddColumn(#\"Joined Grouped Rows with M Expressions Variable Naming-3\", \"fnBulkReplace\", each fnBulkReplace([M Expression], [M Expression Variable Naming])),\n     // This line of code is expanding a record column named \"fnBulkReplace\" in the table obtained from the \"Call Bulk Find and Replace\" step. The expansion is done to retrieve the \"Code\" property from within the record, and the retrieved property is placed in a new column named \"Code\".```\n    #\"Expanded Record Column in Bulk Find and Replace-5\" = Table.ExpandRecordColumn(#\"Added Column with Bulk Replace Function Results-4\", \"fnBulkReplace\", {\"Code\"}, {\"Code\"}),\n     // This code adds a new column \"Code Derived\" to the table. It tries to get the \"Code\" value, if it's not available, it retrieves the \"M Expression\" value instead. Then, it transforms the column's data type to text.\n    #\"Added and Transformed Derived Code Column-6\" = Table.TransformColumnTypes(Table.AddColumn(#\"Expanded Record Column in Bulk Find and Replace-5\", \"Code Derived\", each try [Code] otherwise [M Expression]), {{\"Code Derived\", type text}}),\n     // This code chunk is renaming two columns in a table: changing \"M Expression\" to \"M Expression with Comments\" and \"Code Derived\" to \"M Expression with Comments and Variable Name Changes\".\n    #\"Renamed Columns in Derived Code Table-7\" = Table.RenameColumns(#\"Added and Transformed Derived Code Column-6\",{{\"M Expression\", \"M Expression with Comments\"}, {\"Code Derived\", \"M Expression with Comments and Variable Name Changes\"}}),\n     // This code is transforming the data type of the columns \"M Expression with Comments and Variable Name Changes\" and \"Table Name\" to text in the table \"Renamed Columns\".```\n    #\"Transformed Column Types to Text-8\" = Table.TransformColumnTypes(#\"Renamed Columns in Derived Code Table-7\",{{\"M Expression with Comments and Variable Name Changes\", type text}, {\"Table Name\", type text}}),\n     // This code segment removes all columns from the #\"Transformed Column Types to Text-8\" table except for \"M Expression ID\", \"Table Name\", \"M Expression with Comments\", and \"M Expression with Comments and Variable Name Changes\".\n    #\"Selected Specific Columns from Changed Type Table-9\" = Table.SelectColumns(#\"Transformed Column Types to Text-8\", {\"M Expression ID\", \"Table Name\", \"M Expression with Comments\", \"M Expression with Comments and Variable Name Changes\"})\nin\n    #\"Selected Specific Columns from Changed Type Table-9\";\r\n",
        "connectionOverrides": [
            {
                "path": "powerbi://api.powerbi.com/v1.0/myorg/pass_dev;SampleModel",
                "kind": "AnalysisServices",
                "provider": "CdsA",
                "authenticationKind": null,
                "environmentName": null,
                "apiName": null,
                "connectionName": "{\"kind\":\"AnalysisServices\",\"path\":\"powerbi://api.powerbi.com/v1.0/myorg/pass_dev;SampleModel\"}",
                "audience": null
            },
            {
                "path": "https://azure-open-ai-pq.openai.azure.com/openai/deployments/pbi-4/chat/completions?api-version=2023-07-01-preview",
                "kind": "Web",
                "provider": "CdsA",
                "authenticationKind": null,
                "environmentName": null,
                "apiName": null,
                "connectionName": "{\"kind\":\"Web\",\"path\":\"https://azure-open-ai-pq.openai.azure.com/openai/deployments/pbi-4/chat/completions?api-version=2023-07-01-preview\"}",
                "audience": null
            },
            {
                "path": "https://azure-open-ai-pq.openai.azure.com/openai/deployments/pbi-4/chat/completions",
                "kind": "Web",
                "provider": "CdsA",
                "authenticationKind": null,
                "environmentName": null,
                "apiName": null,
                "connectionName": "{\"kind\":\"Web\",\"path\":\"https://azure-open-ai-pq.openai.azure.com/openai/deployments/pbi-4/chat/completions\"}",
                "audience": null
            },
            {
                "path": "powerbi://api.powerbi.com/v1.0/myorg/fabric playground [dev];Data Lineage Report",
                "kind": "AnalysisServices",
                "provider": "CdsA",
                "authenticationKind": null,
                "environmentName": null,
                "apiName": null,
                "connectionName": "{\"kind\":\"AnalysisServices\",\"path\":\"powerbi://api.powerbi.com/v1.0/myorg/fabric playground [dev];Data Lineage Report\"}",
                "audience": null
            }
        ]
    },
    "annotations": [
        {
            "name": "pbi:QueryGroups",
            "value": "[{\"id\":\"4b83b24d-e1a6-4460-a74b-f706576ed450\",\"name\":\"Parameters\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"0582cbc5-0db9-44a3-b2c4-ab9265b26f3e\",\"name\":\"Power Query\",\"description\":\"Parameters to support Power Query Extraction\",\"parentId\":\"4b83b24d-e1a6-4460-a74b-f706576ed450\",\"order\":2},{\"id\":\"39efdade-e25b-4616-b925-9ca6c9ab5781\",\"name\":\"Azure Open AI\",\"description\":\"\",\"parentId\":\"4b83b24d-e1a6-4460-a74b-f706576ed450\",\"order\":2},{\"id\":\"d0be9ee5-0766-4369-8091-691997d922ad\",\"name\":\"Functions\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"0537a66d-7a9a-46b9-ae9b-6056c79debb4\",\"name\":\"Azure Open API\",\"description\":\"\",\"parentId\":\"d0be9ee5-0766-4369-8091-691997d922ad\",\"order\":2},{\"id\":\"1a15a4aa-f383-4d4d-a49a-ce2d08b72aec\",\"name\":\"Dynamic Management View Queries \",\"description\":\"Extracts Power Query Code from a dataset.\",\"parentId\":null,\"order\":1},{\"id\":\"2921fe94-cd95-4582-b044-49715cd9e4c7\",\"name\":\"Azure Open AI\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"8dc1f78d-0460-404a-97bb-af7a56ff1b16\",\"name\":\"Output\",\"description\":\"\",\"parentId\":null,\"order\":1}]"
        }
    ],
    "entities": [
        {
            "$type": "LocalEntity",
            "name": "M Expressions Not Loaded into Dataset",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "M%20Expressions%20Not%20Loaded%20into%20Dataset.csv"
            },
            "attributes": [
                {
                    "name": "Table Name",
                    "dataType": "string"
                },
                {
                    "name": "M Expression",
                    "dataType": "string"
                },
                {
                    "name": "Starts with Let",
                    "dataType": "boolean"
                },
                {
                    "name": "Dataset Name",
                    "dataType": "string"
                }
            ],
            "partitions": [
                {
                    "name": "FullRefreshPolicyPartition",
                    "refreshTime": "2024-05-10T21:58:35.4046505+00:00",
                    "location": "https://wabieus2bpcdsap1.blob.core.windows.net:443/a2fe9712-35be-4e14-bd57-b0d490e742cc/M%20Expressions%20Not%20Loaded%20into%20Dataset.csv?snapshot=2024-05-10T21%3A58%3A35.3239225Z"
                }
            ]
        },
        {
            "$type": "LocalEntity",
            "name": "M Expressions Visible in Dataset",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "M%20Expressions%20Visible%20in%20Dataset.csv"
            },
            "attributes": [
                {
                    "name": "Table Name",
                    "dataType": "string"
                },
                {
                    "name": "M Expression",
                    "dataType": "string"
                },
                {
                    "name": "Dataset Name",
                    "dataType": "string"
                }
            ],
            "partitions": [
                {
                    "name": "FullRefreshPolicyPartition",
                    "refreshTime": "2024-05-10T21:58:35.6702726+00:00",
                    "location": "https://wabieus2bpcdsap1.blob.core.windows.net:443/a2fe9712-35be-4e14-bd57-b0d490e742cc/M%20Expressions%20Visible%20in%20Dataset.csv?snapshot=2024-05-10T21%3A58%3A35.5857735Z"
                }
            ]
        },
        {
            "$type": "LocalEntity",
            "name": "M Expressions Parsed Commenting",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "M%20Expressions%20Parsed%20Commenting.csv"
            },
            "annotations": [
                {
                    "name": "pbi:EntityTypeDisplayHint",
                    "value": "CalculatedEntity"
                }
            ],
            "attributes": [
                {
                    "name": "M Expression ID",
                    "dataType": "int64"
                },
                {
                    "name": "Dataset ID",
                    "dataType": "string"
                },
                {
                    "name": "Dataset Name",
                    "dataType": "string"
                },
                {
                    "name": "Table Name",
                    "dataType": "string"
                },
                {
                    "name": "M Expression",
                    "dataType": "string"
                },
                {
                    "name": "Starts with Let",
                    "dataType": "boolean"
                },
                {
                    "name": "Index",
                    "dataType": "int64"
                },
                {
                    "name": "Line Index",
                    "dataType": "int64"
                },
                {
                    "name": "Is a Comment",
                    "dataType": "boolean"
                },
                {
                    "name": "Exclude For Comment",
                    "dataType": "boolean"
                },
                {
                    "name": "M Expression To Comment",
                    "dataType": "string"
                },
                {
                    "name": "fnGetComment",
                    "dataType": "string"
                },
                {
                    "name": "M Expression with Comment",
                    "dataType": "string"
                }
            ]
        },
        {
            "$type": "LocalEntity",
            "name": "M Expressions Variable Naming",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "M%20Expressions%20Variable%20Naming.csv"
            },
            "annotations": [
                {
                    "name": "pbi:EntityTypeDisplayHint",
                    "value": "CalculatedEntity"
                }
            ],
            "attributes": [
                {
                    "name": "Find",
                    "dataType": "string"
                },
                {
                    "name": "Replace",
                    "dataType": "string"
                },
                {
                    "name": "M Expression ID",
                    "dataType": "int64"
                }
            ]
        },
        {
            "$type": "LocalEntity",
            "name": "Power Query Code",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "Power%20Query%20Code.csv"
            },
            "annotations": [
                {
                    "name": "pbi:EntityTypeDisplayHint",
                    "value": "CalculatedEntity"
                }
            ],
            "attributes": [
                {
                    "name": "M Expression ID",
                    "dataType": "int64"
                },
                {
                    "name": "Dataset Name",
                    "dataType": "string"
                },
                {
                    "name": "Table Name",
                    "dataType": "string"
                },
                {
                    "name": "M Expression",
                    "dataType": "string"
                },
                {
                    "name": "Starts with Let",
                    "dataType": "boolean"
                }
            ],
            "partitions": [
                {
                    "name": "FullRefreshPolicyPartition",
                    "refreshTime": "2024-05-10T21:58:36.4671398+00:00",
                    "location": "https://wabieus2bpcdsap1.blob.core.windows.net:443/a2fe9712-35be-4e14-bd57-b0d490e742cc/Power%20Query%20Code.csv?snapshot=2024-05-10T21%3A58%3A36.3823174Z"
                }
            ]
        },
        {
            "$type": "LocalEntity",
            "name": "Power Query Code Transformed",
            "description": "",
            "pbi:refreshPolicy": {
                "$type": "FullRefreshPolicy",
                "location": "Power%20Query%20Code%20Transformed.csv"
            },
            "annotations": [
                {
                    "name": "pbi:EntityTypeDisplayHint",
                    "value": "CalculatedEntity"
                }
            ],
            "attributes": [
                {
                    "name": "M Expression ID",
                    "dataType": "int64"
                },
                {
                    "name": "Table Name",
                    "dataType": "string"
                },
                {
                    "name": "M Expression with Comments",
                    "dataType": "string"
                },
                {
                    "name": "M Expression with Comments and Variable Name Changes",
                    "dataType": "string"
                }
            ]
        }
    ]
}